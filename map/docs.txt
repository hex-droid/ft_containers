
 DEFINITION
 	BALANCE FACTOR:
 	In a binary tree the balance factor of a node X is defined to be the
 	height difference of its two child sub-trees.
 	BF(X) := Height(RightSubtree(X)) - Height(LeftSubtree(X))
	A binary tree is defined to be an AVL tree if the invariant BF(X)
	is in included in {-1,0,1} holds for every node X in the tree.
	A node X with BF(X) < 0 is called "left heavy", one with BF(X) > 0
	is called "right heavy", and one with BF(X) = 0 is called "balanced"

	PROPERTIES:
	Balance factors can be kept up-to-date by knowing the previous balance
	factors and the change in height; it is not necessary to know the
	absolute height. For holding the AVL balance information, two bits
	per node are sufficent.
	The height h (counted as the maximal number of levels) of an AVL tree
	with n nodes lies in the interval:
		* where Phi is the golden ration (1+sqrt(5))/2 == 1.618
		and b = (log2(5)/2log2(Phi))-2 == -0.3277
		log2(n + 1) <= h < logPhi(n + 2) + b
	This is because an AVL tree of height h contains at least
	F(h+2) - 1 nodes where Fn is the fibonacci sequence with the seed values
	F1 = F2 = 1. (didn't quite fully understand this. i'll come back later)

 OPERATIONS
 Read-only operations of an AVL tree involve carrying out the same actions
 as would be carried out on an unbalanced binary search tree, but 
 modifications have to observe and restore the height balance of the
 sub-trees.
 	SEARCHING:
 	Seaching for a specific key in AVL tree can be done the same way
 	as that of any balanced or unbalanced binary search tree. In order for
 	search to work effectively it has to employ a comparison function
 	which establishes a total order (or at least a total preorder) on the 
 	set of keys. The number of comparisons required for succesful search
 	is very close to h, so both are in O(log n).
 	
 	TRAVERSAL:
 	As a read-only operator the traversal of an AVL tree functions the same
 	way as on any other binary tree. Exploring all n nodes of the tree
 	visits each link exactly twice: one downward visit to enter the subtree
 	rooted by that node, another visit upward to leave that node's subtree
 	after having explored it.
	
	INSERT:
	When inserting a node into an AVL tree, you initially follow the same
	process as inserting into a Binary Search Tree. If the tree is empty,
	then the node is inserted as the root of the tree. In case the tree
	has not been empty then we go down the root, and recursively go down
	the tree searching for the location to insert the new node. This
	traversal is guided by the comparison function. In this case, the node
	always replaces a NULL reference (left or right) of an external node
	in the tree i.e., the node is either made a left-child or a 
	right-child of the external node.
	After this insertion if a tree becomes unbalanced, only ancestors of
	the newly inserted node are unbalanced. This is because only those
	nodes have their sub-trees altered. So it is necessary to check each
	of the node's ancestors for consistency with the invariants of AVL
	trees: this is called "retracing". This is achieved by considering the
	balance factor of each node.
	Since with a single insertion the height of an AVL subtree cannot 
	increase by more than one, the temporary balance factor of a node
	after an insertion will be in the range [-2,+2]. For each node checked,
	if the temporary balance factor remains in the range [-1,+1] then only
	an update of the balance factor and no rotation is necessary. However,
	if the temporary balance factor becomes less than -1 or greater than 1,
	the subtree rooted at this node is AVL unbalanced, and a rotation is
	needed. With insertion as the code below shows, the adequate rotation
	immediatly perfectly rebalances the tree.

